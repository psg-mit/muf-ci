(*
xt - symbolic
is_outlier - symbolic
outlier_prob - sample
*)

val preprocess_data = fun entry -> List.hd(List.tl(entry)) in

val step = fun (yobs, (first, outlier_prob, xs)) ->
  let prev_xt = List.hd(xs) in

  let xt_mu = if first then 0. else prev_xt in
  let xt_var = if first then 2500. else 1. in

  let symbolic xt <- gaussian(xt_mu, xt_var) in
  let symbolic is_outlier <- bernoulli(outlier_prob) in
  let mu = if is_outlier then 0. else xt in
  let var = if is_outlier then 10000. else 1. in
  let () = observe(gaussian(mu, var), yobs) in

  let () = resample() in

  (false, outlier_prob, cons(xt, xs))
in

(* observations *)
let data = List.map(preprocess_data, File.read("data/processed_data.csv")) in

let sample outlier_prob <- beta(100., 1000.) in
let (_, outlier_prob, xs) = fold(step, data, (true, outlier_prob, [0.])) in
let xs = List.tl(List.rev(xs)) in
(outlier_prob, xs)
